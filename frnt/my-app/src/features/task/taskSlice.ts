import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { getAllTasks } from './taskAPI';
import { ITask,ITasks } from '../../models/ITask';


const initialState: ITasks = {
    tasks: []
};

export const getAllTasksAsync = createAsyncThunk(
    'task/getAllTasks',
    async (access:string) => {
        // console.error("send",cred)
        const response = await getAllTasks(access);
        return response.data;
    }
);

export const taskSlice = createSlice({
    name: 'task',
    initialState,
    reducers: {
      
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder.addCase(getAllTasksAsync.fulfilled, (state, action) => {
            console.log(action.payload)
            state.tasks=action.payload
        });
    },
});

export const { } = taskSlice.actions;
export const selectTasks = (state: RootState) => state.task.tasks;

export default taskSlice.reducer;
