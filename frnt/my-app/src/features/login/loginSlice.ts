import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { login } from './loginAPI';
// import IloginState from '../../models/Ilogin'; '../../models/Ilogin'
import IloginState from '../../models/Ilogin';
import jwt_decode from "jwt-decode";

const initialState: IloginState = {
    userName: '',
    logged: false,
    email: '',
    access: '',
    refresh: ''
};

export const loginAsync = createAsyncThunk(
    'login/login',
    async (cred: any) => {
        // console.error("send",cred)
        const response = await login(cred);
        // console.log(response)
        return response.data;
    }
);

export const loginSlice = createSlice({
    name: 'login',
    initialState,
    reducers: {
        logout: (state) => {
            state.email=""
            state.logged=false
            state.userName=""
            state.access=""
            state.refresh=""
          },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder.addCase(loginAsync.fulfilled, (state, action) => {
            const decoded:any = jwt_decode(action.payload.access);
            state.email=decoded.eeemail
            state.logged=true
            state.userName=decoded.username
            state.access=action.payload.access
            state.refresh=action.payload.refresh
        });
    },
});

export const {logout } = loginSlice.actions;
export const selectUserName = (state: RootState) => state.login.userName;
export const selectEmail = (state: RootState) => state.login.email;
export const selectLogged = (state: RootState) => state.login.logged;
export const selectAccess = (state: RootState) => state.login.access;

export default loginSlice.reducer;
